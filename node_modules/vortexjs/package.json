{
  "name": "vortexjs",
  "version": "0.0.12",
  "description": "Port de Vortex a Javascript ",
  "main": "Vortex.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "cryptico": "*",
    "socket.io-client": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jlurgo/VortexJS.git"
  },
  "author": {
    "name": "Vortex Group"
  },
  "license": "Creative Commons",
  "bugs": {
    "url": "https://github.com/jlurgo/VortexJS/issues"
  },
  "readme": "Vortex.JS\r\n==================\r\n\r\nImplementación del protocolo de comunicaciones Vortex en JavaScript para node.js y browsers.\r\n\r\n### Otras implementaciones:\r\nimplementación en Java: https://github.com/kfgodel/vortex\r\n\r\n## Para que sirve\r\nLa función de vortex es la de permitir la comunicación entre sistemas informáticos sin importar el lenguaje de programación, el canal de comunicación utilizado, o el protocolo físico necesario para la transmisión real de información.\r\nEsta función se logra a través de la manipulación de los componentes para crear redes por las cuales circulan mensajes.\r\n\r\n## Como funciona\r\nPrimero se debe definir la topología de una red, esto se logra conectando distintos nodos entre si.\r\nTodo nodo tiene el método:\r\n```\r\nconectarCon(un_nodo)\r\n```\r\nMétodo utilizado para conectar unidireccionalmente un nodo con otro. \r\nPara que la conexión entre 2 nodos sea bidireccional se deberán conectar unidireccionalmente entre si:\r\n```\r\nnodo1.conectarCon(nodo2);\r\nnodo2.conectarCon(nodo1);\r\n```\r\nTodos los nodos también implementan el método:\r\n```\r\nrecibirMensaje(un_mensaje)\r\n```\r\nMétodo utilizado por los nodos para mandarse mensajes entre si.\r\n\r\n## Los nodos principales de Vortex son:\r\n\r\n### El portal:\r\nEs la frontera y el punto de acceso a una red Vortex.\r\nPermite inyectar mensajes a la red con el método \r\n```\r\nenviarMensaje(un_mensaje)\r\n```\r\n\r\nTambién permite recibir mensajes de la red llamando al método\r\n```\r\npedirMensajes(filtro, callback)\r\n```\r\nCuando se recibe un mensaje que pasa por el filtro se ejecuta el callback pasado.\r\nAl pedir mensajes a un portal, éste envía (publica) el filtro al nodo que tiene conectado.\r\nTambién recibe publicaciones de filtros de la red a través de su nodo vecino.\r\nSi al enviar un mensaje por un portal este no pasa por los filtros recibidos por el portal el mensaje se descarta.\r\n\r\n### El Router:\r\nSirve como nexo entre portales y otros routers.\r\nConectando routers entre si se define la topología de una red vortex.\r\nEl router se encarga de reenviar los mensajes que recibe a los nodos que tiene conectados.\r\nTambién se encarga de recibir publicaciones de filtros de sus nodos vecinos, de combinar los filtros y republicarlos al resto de los nodos.\r\nEl router está interesado en recibir todos los mensajes que quieren recibir sus nodos vecinos.\r\n\r\n## Adaptadores varios:\r\nExisten otros nodos que sirven para enviar mensajes por distintos medios.\r\n\r\n### NodoClienteHTTP:\r\nSe conecta via ajax con una url, crea una sesión y periódicamente envía los mensajes que tiene en su bandeja de salida y recibe los mensajes del servidor remoto.\r\n\r\n### NodoSesionHTTPServer\r\nEs el que administra la sesión y los mensajes de un cliente en el server (se comunica uno a uno con el NodoClienteHTTP)\r\n\r\n### NodoConectorSocket\r\nConecta via WebSockets (usa Socket.io)\r\n\r\n## Ejemplo de uso\r\n\r\n```\r\nvar portal_1 = new NodoPortalBidi();\r\nvar portal_2 = new NodoPortalBidi();\r\n\r\nvar router = new NodoRouter();\r\n\r\nportal_1.conectarCon(router);\r\nrouter.conectarCon(portal_1);\r\n\r\nportal_2.conectarCon(router);\r\nrouter.conectarCon(portal_2);\r\n\r\nvar filtro = new FiltroXClaveValor('tipoDeMensaje', 'prueba');\r\nportal_1.pedirMensajes(filtro, function(mensaje){\r\n    alert(\"mensaje de prueba recibido en portal 1\");\r\n});\r\n\r\nportal_2.enviarMensaje({tipoDeMensaje:'prueba'});\r\n\r\n```\r\n## Tests\r\n[tests](http://jlurgo.github.io/VortexJS/jasmine-standalone-1.3.1/SpecRunner.html)\r\n\r\n## Licencia\r\n\r\nVortex by Vortex Group is licensed under a Creative Commons Reconocimiento 3.0 Unported License.\r\nTo view a copy of this licence, visit: http://creativecommons.org/licenses/by/3.0/\r\nProject URL: https://sourceforge.net/p/vortexnet\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "vortexjs@0.0.12",
  "dist": {
    "shasum": "a5521ff6f025e59a27cafdfc99af31bd0ff27803"
  },
  "_from": "vortexjs@*",
  "_resolved": "https://registry.npmjs.org/vortexjs/-/vortexjs-0.0.12.tgz"
}
